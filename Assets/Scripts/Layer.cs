//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.34014
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

public class Layer
{
		private GameObject layerGameObject;
		private GameObject[,] layerArray;
		private const string LAYER_SUFFIX = "Layer";
		
		public int Width {
				get;
				private set;
		}
	
		public int Height {
				get;
				private set;
		}

		public GameObject[,] LayerArray {
			get {
				return layerArray;
			}
		}

		public GameObject LayerGameObject {
			get {
				return layerGameObject;
			}
		}

		public string Name
		{
			get { return LayerGameObject != null ? LayerGameObject.name : LAYER_SUFFIX; }
		}
	
		public Layer (string layerName, Vector3 position, int width, int height)
		{
			Width = width;
			Height = height;
			layerArray = new GameObject[Width, Height];
			
			layerGameObject = new GameObject ();
			layerGameObject.name = layerName;
			layerGameObject.transform.position = position;
		}
	
		public Vector2 GetTilePosition (GameObject tileGameObject)
		{
				if (tileGameObject != null && layerArray != null) {
						for (int i = 0; i < Width; i++) {
								for (int j = 0; j < Height; j++) {
										if (tileGameObject.Equals (layerArray [i, j])) {
												return new Vector2 (i, j);
										}
								}
						}
				}
	
				return new Vector2 (-1, -1);
		}

		public bool ContainsTile(GameObject tileGameObject){
			if (tileGameObject != null) {
				Vector2 tilePosition = GetTilePosition(tileGameObject);		
				
				return (tilePosition.x != -1 && tilePosition.y != -1);
			}

			return false;
		}

		public Vector3 CalculateRealCoordinates(int indexX, int indexY)
		{
			Vector3 parentPosition = layerGameObject != null ? layerGameObject.transform.position : Vector3.zero;
			
			//return new Vector3(parentPosition.x - ((float)Width / 2) + (float) indexX, parentPosition.y - ((float)Height / 2) + (float)indexY);
		return new Vector3 (parentPosition.x + indexX, parentPosition.x + indexY);
		}

		public bool AddTile(GameObject prefabTile, int indexX, int indexY)
		{
			if (prefabTile != null && layerArray != null) {
				GameObject tileInstance = (GameObject)MonoBehaviour.Instantiate(prefabTile);
				tileInstance.name = prefabTile.name + "Tile";

				if (indexX >= 0 && indexX < Width && indexY >= 0 && indexY < Height) {
					layerArray[indexX, indexY] = tileInstance;
					tileInstance.transform.position = CalculateRealCoordinates(indexX, indexY);
					GameObjectUtils.AppendChild(layerGameObject, tileInstance);
					
				}
			}

			return false;
		}

		public bool RemoveTile (GameObject tileGameObject)
		{
			if (tileGameObject != null && layerArray != null) {
					Vector2 tilePosition = GetTilePosition (tileGameObject);
	
					if (tilePosition.x != -1 && tilePosition.y != -1) {
							int tileX = (int)tilePosition.x;
							int tileY = (int)tilePosition.y;
							layerArray [tileX, tileY] = null;
							return true;
					}
			}
			return false;
		}
	
		public bool MoveTile (GameObject tileGameObject, Vector2 direction)
		{
				if (tileGameObject != null && layerArray != null) {
						Vector2 tilePosition = GetTilePosition (tileGameObject);
		
						if (tilePosition.x != -1 && tilePosition.y != -1) {
								int tileX = (int)tilePosition.x;
								int tileY = (int)tilePosition.y;
								//Debug.Log ("Tile was found to be moved! Position: " + tileX + "," + tileY);
			
								int deltaX = (int)direction.x;
								int deltaY = (int)direction.y;
			
								//Debug.Log(string.Format("Movement direction: {0},{1}", deltaX, deltaY));
			
								if (Mathf.Abs (deltaX) > 0 || Mathf.Abs (deltaY) > 0) {
										int newPositionX = tileX + deltaX;
										int newPositionY = tileY + deltaY;
				
										if (newPositionX <= 0 || newPositionX >= Width - 1 || newPositionY <= 0 || newPositionY >= Height - 1) {
												//Debug.Log("You can't move tiles to the borders!");
												return false;
										}
				
										//Debug.Log(string.Format("Movement inside the borders! Trying to move from {0},{1} to {2},{3}",tileX,tileY,newPositionX,newPositionY));
				
										GameObject tileAtNewPosition = layerArray [newPositionX, newPositionY];
				
										if (tileAtNewPosition == null) {
												iTween.MoveTo (layerArray [tileX, tileY], layerArray [tileX, tileY].transform.position + (Vector3)direction, 0.5f);
												layerArray [newPositionX, newPositionY] = layerArray [tileX, tileY];
												layerArray [tileX, tileY] = null;
												return true;
					
										} else {
												//Debug.Log(string.Format("A tile was found at the position {0},{1}. You can't move the tile there.",newPositionX, newPositionY));
										}
								}
						} else {
								//Debug.Log ("Tile wasn't found!");
						}
				}
				return false;
		}
}

